# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.1.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AJWIJvsRVhnrbN87dM3Huj5POUcWOpyU

**ФИО:**
"""

Копьев Данила Александрович

"""# Задание 1

**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.


Отрабатываемый принцип: Наследование
"""

class Employee:
    def __init__(self, major, career_background, age):
        self.major = major
        self.career_background = career_background
        self.age = age
        self.bonus_salary = 0


class Manager(Employee):
    base_salary = 40000

    def __init__(self, major, career_background, age):
        super().__init__(major, career_background, age)

    def experience_bonus(self):
        if self.career_background <= 3:
            bonus = 0
        elif 3 < self.career_background <= 5:
            bonus = 10000
        else:
            bonus = 12000
        self.bonus_salary += bonus
        return bonus

    def age_bonus(self):
        bonus = 0
        if self.age - self.career_background < 18:
            bonus -= 10000
        elif 18 <= self.age < 21:
            bonus += 2000
        elif 21 <= self.age < 30:
            bonus += 3000
        self.bonus_salary += bonus
        return bonus


class Developer(Employee):
    base_salary = 65000

    def __init__(self, major, career_background, age):
        super().__init__(major, career_background, age)

    def experience_bonus(self):
        if self.career_background <= 3:
            bonus = 0
        elif 3 < self.career_background <= 5:
            bonus = 10000
        else:
            bonus = 12000
        self.bonus_salary += bonus
        return bonus

    def age_bonus(self):
        bonus = 0
        if self.age - self.career_background < 18:
            bonus -= 10000
        elif 18 <= self.age < 21:
            bonus += 2000
        elif 21 <= self.age < 30:
            bonus += 3000
        self.bonus_salary += bonus
        return bonus


def start():
    major = 'skibidi'
    while True:
        major = input('Введите название специальности (Manager or Developer): ')
        career_background = int(input('Введите опыт работы (числом): '))
        age = int(input('Введите свой возраст: '))
        if major == 'Manager':
            user = Manager(major, career_background, age)
        elif major == 'Developer':
            user = Developer(major, career_background, age)
        else:
            break

    total_salary = user.experience_bonus() + user.age_bonus() + user.base_salary

    print(f'Ваш бонус за опыт работы составляет {user.experience_bonus()}р.')
    print(f'Ваш бонус ваш возраст составляет {user.age_bonus()}р.')
    print(f'Ваша итоговая зарплата составляет {total_salary}р.')


if __name__ == '__main__':
    start()

"""# Задание 2

**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.


Отрабатываемый принцип: Полиморфизм
"""



"""# Задание 3

Онлайн-магазин:
- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.
- Product включает информацию о цене, наличии на складе и категории товара.
Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.
- Customer управляет информацией о пользователе и его истории заказов.
- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.
"""



"""# Задание 4

Симулятор космического корабля:
- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.
- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.
- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).
- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами).
"""



"""# Дополнительно:

**Описание:** создайте консольную версию игры крестики-нолики, используя классы
"""

