# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.6.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19CkCZEACPHYQ9CY93YgJzl98g23oxk24

---

# **Дисклеймер**

В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики
"""

Копьев Данила Александрович

"""---

# Задание 1

**Задача:**

Напишите функцию очищающий список от дубликтов


*Запрещено:*

*   Использовать set() или готовые функции очищающие список от дубликатов

Вввод:

```
apple banana apple 1 3 4 4 5
```


Вывод:

```
apple banana 1 3 4 5
```
"""

def checking():
  new_list = []
  for i in list_of_words:
    if i not in new_list:
      new_list.append(i)
    else:
      None
  print(new_list)
  return


list_of_words = input().split(" ")


checking()

"""# Задание 2

**Задача:**

Написать функцию для нахождения простых чисел в диапазоне

Ввод:

```
10, 50
```

Вывод:

```
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47
```
"""

def prime_numbers(num1, num2):
  list1 = []
  for n in range(num1, num2+1):
    cnt = 0
    for i in range(1, n+1):
      if n % i == 0:
        cnt += 1
    if cnt == 2:
      list1.append(n)
  return list1


num1 = int(input("Введите первое число: "))
num2 = int(input("Введите второе число: "))
print(prime_numbers(num1, num2))

"""# Задание 3

Напишите функцию для объединения двух списков (список ключей и список значении) в словарь

*Запрещено:*

*   Использования готовых функции для объединения списков (пример: zip() )

Дано:

```
keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
```

Вывод:
```
{'a': 1, 'b': 2, 'c': 3, 'e': 4}
```



"""

def joining():
  for i in range(len(keys)):
    dictt[keys[i]] = str(values[i])
  print(dictt)


joining()


keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
dictt = {}

"""# Задание 4

Напишите функцию(ии) для подсчета статистических параметров:
*   Сумму
*   Среднее арифметическое
*   Медиану
*   Моду


*Запрещено:*

*   sum()
*   sorted()
*   и других функции предоставляющих готовое решение задания

Дано:

```
numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

```

Вывод:
```
{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}
```

"""

def summ(numbers):
  summ_new = 0
  for i in numbers:
    summ_new += numbers[i]
  print(summ_new - 1)
  return


def average(numbers):
  summ_new_1 = 0
  k = 0
  for j in numbers:
    summ_new_1 += numbers[j]
    k += 1
  print(summ_new_1 / k)


def find_median(numbers):
  if len(numbers) % 2 == 0:
    median = len(numbers) / 2
  else:
    median = (len(numbers) - 1) / 2
  print(median)
  return


def find_mode(numbers):

  return


numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

summ(numbers)
find_median(numbers)
average(numbers)

"""# Задание 5

На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.

*Запрещено:*

*   len()

Дано:

```
Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.

```

Вывод:
```
Самое длинное слово с номером 5: обязательны
```
"""

def count_symbols(words):
    count_dict = { }
    for word in words:
        count = 0
        for symbol in word:
            count += 1
        count_dict[word] = count

    return count_dict


def find_max(dict_):
    max_k = 0
    max_v = 0
    for k, v in dict_.items():
        if v > max_v:
            max_k = k
            max_v = v

    return max_k

string = 'Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.'
words = string.split(' ')
dict_ = count_symbols(words)
max_word = find_max(dict_)
print(max_word)

"""# Задание 6

Напишите программу, для управления оценками студентов, со следующими функциями:

* Добавление информации о студенте и его оценках.
* Подсчет среднего балла студента.
* Получение списка всех студентов с их средними баллами.
* Поиск студента по имени и вывод его оценок и среднего балла.




"""

def add_student(students, name):
    if name not in students:
        students[name] = []
        print(f"Студент '{name}' успешно добавлен.")
    else:
        print(f"Студент '{name}' уже существует.")

def add_grade(students, name, grade):
    if name in students:
        students[name].append(grade)
        print(f"Оценка {grade} добавлена для студента '{name}'.")
    else:
        print(f"Студент '{name}' не найден.")

def calculate_average(grades):
    if grades:
        return sum(grades) / len(grades)
    return 0

def get_average_grades(students):
    averages = {}
    for name, grades in students.items():
        averages[name] = calculate_average(grades)
    return averages

def find_student(students, name):
    if name in students:
        grades = students[name]
        average = calculate_average(grades)
        return name, grades, average
    return None

def main_menu():
    print("\nМеню действий:")
    print("1. Добавить студента")
    print("2. Добавить оценку")
    print("3. Показать средние баллы студентов")
    print("4. Найти студента по имени")
    print("5. Выход")

def main():
    students = {}
    while True:
        main_menu()
        choice = input("Выберите действие (1-5): ")

        if choice == '1':
            name = input("Введите имя студента: ")
            add_student(students, name)

        elif choice == '2':
            name = input("Введите имя студента: ")
            grade = float(input("Введите оценку: "))
            add_grade(students, name, grade)

        elif choice == '3':
            average_grades = get_average_grades(students)
            print("Средние баллы студентов:", average_grades)

        elif choice == '4':
            name = input("Введите имя студента: ")
            student_info = find_student(students, name)
            if student_info:
                name, grades, average = student_info
                grades_str = ", ".join(map(str, grades))
                print(f"Информация о студенте:\nИмя: {name}; Оценки: {grades_str}; Средний балл: {average:.2f}.")
            else:
                print("Студент не найден.")

        elif choice == '5':
            print("Выход из программы.")
            break

        else:
            print("Некорректный выбор, пожалуйста, выберите число от 1 до 5.")

if __name__ == "__main__":
    main()

"""# Задание 7


**Задача:**

Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.

Ключевые особенности:

*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос
*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.
*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.
*  Реализуйте функцию добавления нового вопроса
*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса

"""

import random


def add_question(questions, question, answer):
    questions.append({'question': question, 'answer': answer})


def shuffle_questions(questions):
    random.shuffle(questions)


def ask_questions(questions):
    score = 0
    results = []

    for index, q in enumerate(questions):
        user_answer = input(f"{index + 1}. {q['question']} ")
        if user_answer.lower() == q['answer'].lower():
            print("Правильно!")
            score += 1
            results.append(f"Вопрос номер {index + 1} - 1 балл")
        else:
            print("Неправильно. Правильный ответ:", q['answer'])
            results.append(f"Вопрос номер {index + 1} - 0 баллов")

    return score, results


def display_score(score, total_questions, results):
    print("\nРезультаты последней викторины:")
    for result in results:
        print(result)
    print(f"Итого: {score}/{total_questions} баллов\n")


def main():
    questions = [
        {"question": "Какой цвет травы?", "answer": "Зеленый"},
        {"question": "Сколько ног у паука?", "answer": "Восемь"},
        {"question": "Что у коровы на лбу?", "answer": "Рога"},
        {"question": "Какой океан самый большой?", "answer": "Тихий"},
        {"question": "Кто царь животных?", "answer": "Лев"}
    ]

    last_results = []

    while True:
        print("Выберите действие:")
        print("1. Начать викторину")
        print("2. Добавить вопрос")
        print("3. Перемешать вопросы")
        print("4. Посмотреть результаты последней викторины")
        print("0. Выход")

        choice = input("Введите номер действия: ")

        if choice == '1':
            if not questions:
                print("Нет доступных вопросов для викторины. Пожалуйста, добавьте вопросы.")
                continue

            print("Добро пожаловать в викторину! Ответьте на следующие вопросы:")
            score, last_results = ask_questions(questions)
            display_score(score, len(questions), last_results)

        elif choice == '2':
            question = input("Введите вопрос: ")
            answer = input("Введите ответ (одним словом): ")
            add_question(questions, question, answer)

        elif choice == '3':
            shuffle_questions(questions)
            print("Вопросы перемешаны.")

        elif choice == '4':
            if last_results:
                display_score(last_results.count('1 балл'), len(last_results), last_results)
            else:
                print("Нет результатов для отображения.")

        elif choice == '0':
            print("Выход из викторины.")
            break

        else:
            print("Некорректный ввод, пожалуйста, попробуйте снова.")

if __name__ == "__main__":
    main()