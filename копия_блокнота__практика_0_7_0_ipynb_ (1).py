# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.7.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B7meNqW3OLZLOH1jHfApL_-v2vBAMoBR

Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)

ФИО:
"""

Копьев Данила Александрович

"""## Задание 1. HTTP-запросы, ответы и погода

Описание:

Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.

Можно использовать API: https://open-meteo.com/. Используйте метод GET.


Ввод
```
56.50, 60.35
```

Вывод
```
Сегодня (1.11) погода 20 ◦С, нет осадков, туман
```
"""

import requests
from datetime import datetime

# функция отправки запроса
def send_request(url):
    response = requests.get(url)

    status_code = response.status_code
    if status_code == 200:
        return response.json()
    return None


def clear_data(data):
    # получение текущей даты
    current_date = datetime.today().date()
    current_date = f'{current_date.day}.{current_date.month}'

    # получение температуры
    temperature = data['current']['temperature_2m']
    temperature_format = data['current_units']['temperature_2m']

    # получение кода температуры
    weather_code = data['current']['weather_code']

    # определение погоды по коду
    if weather_code in [0, 1]:
        weather = 'нет осадков, ясно'
    elif weather_code == 45:
        weather = 'нет осадков, туман'
    elif weather_code in [61, 63, 65 ,71 ,73, 75]:
        weather = 'осадки, нет тумана'
    else:
        weather = 'выгляни в окно и посмотри сам'

    message = f'Сегодня ({current_date}) погода {temperature} {temperature_format}, {weather}'

    return message


def main():
    coordinates = input('Введите ваши координаты').split(', ')
    url = f'https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&current=temperature_2m,weather_code&forecast_days=1'
    data = send_request(url)
    message = clear_data(data)
    print(message)


main()

"""## Задание 2. HTTP-запросы, ответы и покемоны

**Описание:**


Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:

1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов

2. Извлеките имена покемонов из ответа и выведите их списком

3. Введите с помощью input() название одного из покемонов


```
Имя покемона: clefairy
```



4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне

5. Извлеките и выведите следующие данные о введенном покемоне:

     • Имя

     • Тип

     • Вес

     • Рост

     • Способности

Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию.
"""

dict_of_pok = [{'name': 'bulbasaur', 'url': 'https://pokeapi.co/api/v2/pokemon/1/'},
  {'name': 'ivysaur', 'url': 'https://pokeapi.co/api/v2/pokemon/2/'},
  {'name': 'venusaur', 'url': 'https://pokeapi.co/api/v2/pokemon/3/'},
  {'name': 'charmander', 'url': 'https://pokeapi.co/api/v2/pokemon/4/'},
  {'name': 'charmeleon', 'url': 'https://pokeapi.co/api/v2/pokemon/5/'},
  {'name': 'charizard', 'url': 'https://pokeapi.co/api/v2/pokemon/6/'},
  {'name': 'squirtle', 'url': 'https://pokeapi.co/api/v2/pokemon/7/'},
  {'name': 'wartortle', 'url': 'https://pokeapi.co/api/v2/pokemon/8/'},
  {'name': 'blastoise', 'url': 'https://pokeapi.co/api/v2/pokemon/9/'},
  {'name': 'caterpie', 'url': 'https://pokeapi.co/api/v2/pokemon/10/'},
  {'name': 'metapod', 'url': 'https://pokeapi.co/api/v2/pokemon/11/'},
  {'name': 'butterfree', 'url': 'https://pokeapi.co/api/v2/pokemon/12/'},
  {'name': 'weedle', 'url': 'https://pokeapi.co/api/v2/pokemon/13/'},
  {'name': 'kakuna', 'url': 'https://pokeapi.co/api/v2/pokemon/14/'},
  {'name': 'beedrill', 'url': 'https://pokeapi.co/api/v2/pokemon/15/'},
  {'name': 'pidgey', 'url': 'https://pokeapi.co/api/v2/pokemon/16/'},
  {'name': 'pidgeotto', 'url': 'https://pokeapi.co/api/v2/pokemon/17/'},
  {'name': 'pidgeot', 'url': 'https://pokeapi.co/api/v2/pokemon/18/'},
  {'name': 'rattata', 'url': 'https://pokeapi.co/api/v2/pokemon/19/'},
  {'name': 'raticate', 'url': 'https://pokeapi.co/api/v2/pokemon/20/'}]

import requests


def main():
  name = input("Введите имя покемона: ")
  url = f"https://pokeapi.co/api/v2/pokemon/{name}/"
  data = send_request(url)
  characteristics(name, data)
  return


def send_request(url):
    response = requests.get(url)

    status_code = response.status_code
    if status_code == 200:
        return response.json()
    return


def characteristics(name, data):
  print(f"Имя покемона: {name}")
  print(f"Тип покемона: {data['types'][0]['type']['name']}")
  print(f'Вес покемона: {data["weight"]}')
  print(f'Рост покемона: {data["height"]}')
  print(f"Способности покемона: {data['abilities'][0]['ability']['name']}")
  return


main()

"""## Задание 3. HTTP-запросы, ответы и посты

**Описание:**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:

1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON

2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON

3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль
"""

import requests

# отправляем запрос серверу
def send_request():
  url = "https://jsonplaceholder.typicode.com/posts"
  response = requests.get(url)

  status_code = response.status_code
  if status_code == 200:
    return response.json()
  return

# поиск поста
def find_post():
  id = int(input("Введите id: "))
  # в нашем случае id и индекс списка отличаются на единицу:
  data = send_request()
  return data[id - 1]

# обработка json
def data_processing():
  id_data = find_post()
  for k, v in id_data.items():
    print(f"{k}: {v}")
  return


data_processing()

"""## Задание 4. HTTP-запросы, ответы и работа с постами

**Описание**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:

1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON


```
Заголовок: Новый пост
Содержимое поста: Тут должно находиться содержимое нового поста...
ID пользователя: 10
```



2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON

3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа
"""

import requests
from PIL import Image
from IPython.display import display
import io


def dog_breeds(url):
    response = requests.get(url)
    status_code = response.status_code

    if status_code in [200, 201]:
        return response.json()
    return

url = 'https://dog.ceo/api/breeds/list/all'
data = dog_breeds(url)
all_breeds = {}
number = 0

for v in data.values():
    if type(v) == dict:
        for k in v.keys():
            number += 1
            all_breeds[number] = k

breeds = input('Введите породы собак: ').split(', ')

for key, val in all_breeds.items():
    if val in breeds:
        print(f'Порода собаки: {val}')
        url = f'https://dog.ceo/api/breed/{val}/images'
        response = requests.get(url)

        if response.status_code in [200, 201]:
              image_url = response.json()['message'][0]

        res = requests.get(image_url)
        img = Image.open(io.BytesIO(res.content))
        display(img)

"""## Задание 5. HTTP-запросы, ответы и пёсики

**Описание**

Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.

Этапы:

1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка

2. Реализуйте возможность ввода нескольких пород собак через запятую


```
african, chow, dingo
```



3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого


Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.

*Подсказка*



```
import requests
from PIL import Image
from IPython.display import display
import io

url = <____>
response = <____>
        
if response.<______> == <___>:
      image_url = response.json()['message']

res = requests.<__>(image_url)
img = Image.open(io.BytesIO(res.content))
display(img)
```
"""

import requests
from PIL import Image
from IPython.display import display
import io


def get_breeds_list():
    url = "https://dog.ceo/api/breeds/list/all"
    response = requests.get(url)
    if response.status_code == 200:
        breeds_dict = response.json()
        breeds_list = list(breeds_dict["message"].keys())
        for index, breed in enumerate(breeds_list, start=1):
            print(f"{index}. {breed}")
    else:
        print("Ошибка при получении списка пород.")


def get_dogs_images(breed_names):
    for breed_name in breed_names:
        url = f"https://dog.ceo/api/breed/{breed_name}/images/random"
        response = requests.get(url)
        if response.status_code == 200:
            image_url = response.json()["message"]
            res = requests.get(image_url)
            img = Image.open(io.BytesIO(res.content))
            display(img)
        else:
            print(f"Не удалось получить изображение для породы {breed_name}.")


get_breeds_list()

breed_input = input("Введите названия пород через запятую: ").strip()
breed_names = [breed.strip() for breed in breed_input.split(",")]

get_dogs_images(breed_names)