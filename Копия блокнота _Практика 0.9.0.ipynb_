{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1zZbU5QXY3ZEtfsKWHQC-JGRhxn7rwGmd","timestamp":1731584810729}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО"],"metadata":{"id":"8hJfL9b2l439"}},{"cell_type":"code","source":["Копьев Данила Александрович"],"metadata":{"id":"wRnqvYOkl6EX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дисклеймер"],"metadata":{"id":"weOtPwPQmgpD"}},{"cell_type":"markdown","source":["В данной практике вам необходимо применить все ваши знания по темам:\n","\n","- Функции\n","- Словари\n","- Списки\n","- Множества\n","- Условные конструкции\n","- Запросы\n","\n","и все что было изучено на прошлых практических занятиях\n","\n","В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно"],"metadata":{"id":"LznB3uscmjDa"}},{"cell_type":"markdown","source":["# Задание 0"],"metadata":{"id":"7nSJIqkTvC_C"}},{"cell_type":"markdown","source":["Создайте функцию по нахождению уникальных элементов из двух списков\n","\n","\n","\n","```\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","```\n","\n"],"metadata":{"id":"exACjTiVvGUe"}},{"cell_type":"code","source":["def unique_elements(a, b):\n","    set_a = set(a)\n","    set_b = set(b)\n","\n","    unique_a = set_a - set_b\n","    unique_b = set_b - set_a\n","\n","    unique_elements = unique_a.union(unique_b)\n","\n","    return list(unique_elements)\n","\n","\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","result = unique_elements(a, b)\n","print(result)"],"metadata":{"id":"dQheNSYd4nd2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"SVWNlBALpCNo"}},{"cell_type":"markdown","source":["Симулятор виртуального питомца\n","\n","Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.\n","\n","Требования:\n","\n","- Функция для усыновления питомца (имя, тип, возраст).\n","- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.\n","- Функция для отображения состояния питомца (голод, радость, энергия)."],"metadata":{"id":"RcKA-VEqpC7f"}},{"cell_type":"code","source":["import random\n","\n","class Pet:\n","    def __init__(self, name, pet_type, age):\n","        self.name = name\n","        self.pet_type = pet_type\n","        self.age = age\n","        self.hunger = random.randint(3, 6)  # Уровень голода от 3 до 6\n","        self.happiness = random.randint(1, 3)  # Уровень радости от 1 до 3\n","        self.energy = random.randint(2, 4)  # Уровень энергии от 2 до 4\n","        self.is_fed = False\n","\n","    def feed(self, food):\n","        if self.is_fed:\n","            print(f'Питомец {self.name} сыт, есть не желает.')\n","            return\n","        self.hunger += random.randint(3, 6)\n","        self.happiness += random.randint(1, 3)\n","        self.energy += random.randint(2, 4)\n","\n","        # Проверяем переполнение уровней\n","        self.hunger = min(self.hunger, 14)\n","        self.happiness = min(self.happiness, 14)\n","        self.energy = min(self.energy, 14)\n","\n","        self.is_fed = True\n","        print(f'Вы покормили {self.name} ({self.pet_type}) едой: {food}.')\n","\n","    def status(self):\n","        return (f'Имя: {self.name}, Тип: {self.pet_type}, Возраст: {self.age}, '\n","                f'Уровень голода: {self.hunger}, Уровень радости: {self.happiness}, '\n","                f'Уровень энергии: {self.energy}')\n","\n","pets = []\n","\n","def adopt_pet():\n","    name = input('Введите имя питомца: ')\n","    pet_type = input('Введите тип питомца (рыба, черепаха, хомяк): ')\n","    age = input('Введите возраст питомца: ')\n","    new_pet = Pet(name, pet_type, age)\n","    pets.append(new_pet)\n","    print(f'Вы усыновили питомца {name}!')\n","\n","def feed_pet():\n","    name = input('Введите имя питомца, которого хотите покормить: ')\n","    food = input('Введите название еды для питомца: ')\n","\n","    for pet in pets:\n","        if pet.name == name:\n","            pet.feed(food)\n","            return\n","    print('Питомец не найден.')\n","\n","def view_pet_status():\n","    name = input('Введите имя питомца для просмотра состояния: ')\n","\n","    for pet in pets:\n","        if pet.name == name:\n","            print(pet.status())\n","            return\n","    print('Питомец не найден.')\n","\n","def main():\n","    print('Вас приветствует симулятор домашних животных.'\n","          'В нем можно: \\n\\n'\n","          '1. Усыновить питомца \\n'\n","          '2. Покормить питомца \\n'\n","          '3. Просмотреть состояние питомца \\n'\n","          '4. Просмотреть своих питомцев \\n'\n","          '0. Выход \\n\\n')\n","\n","    while True:\n","        choice = input('Выберите действие: ')\n","        if choice == '1':\n","            adopt_pet()\n","        elif choice == '2':\n","            feed_pet()\n","        elif choice == '3':\n","            view_pet_status()\n","        elif choice == '4':\n","            for pet in pets:\n","                print(f'- {pet.name} ({pet.pet_type})')\n","        elif choice == '0':\n","            print('Выход из программы.')\n","            break\n","        else:\n","            print('Неверный выбор, попробуйте снова.')\n","\n","if __name__ == '__main__':\n","    main()"],"metadata":{"id":"hE7mF-HXpJLO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732109979361,"user_tz":-300,"elapsed":49029,"user":{"displayName":"Данила Копьев (Ofpoil)","userId":"14884835633617481459"}},"outputId":"d6be8734-80e6-4536-83ef-b601759d9a59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Вас приветствует симулятор домашних животных.В нем можно: \n","\n","1. Усыновить питомца \n","2. Покормить питомца \n","3. Просмотреть состояние питомца \n","4. Просмотреть своих питомцев \n","0. Выход \n","\n","\n","Выберите действие: 1\n","Введите имя питомца: д\n","Введите тип питомца (рыба, черепаха, хомяк): д\n","Введите возраст питомца: 333\n","Вы усыновили питомца д!\n","Выберите действие: 3\n","Введите имя питомца для просмотра состояния: д\n","Имя: д, Тип: д, Возраст: 333, Уровень голода: 3, Уровень радости: 3, Уровень энергии: 3\n","Выберите действие: 1\n","Введите имя питомца: ж\n","Введите тип питомца (рыба, черепаха, хомяк): ж\n","Введите возраст питомца: 111\n","Вы усыновили питомца ж!\n","Выберите действие: 3\n","Введите имя питомца для просмотра состояния: ж\n","Имя: ж, Тип: ж, Возраст: 111, Уровень голода: 6, Уровень радости: 2, Уровень энергии: 4\n","Выберите действие: 2\n","Введите имя питомца, которого хотите покормить: д\n","Введите название еды для питомца: писька\n","Вы покормили д (д) едой: писька.\n","Выберите действие: 3\n","Введите имя питомца для просмотра состояния: д\n","Имя: д, Тип: д, Возраст: 333, Уровень голода: 6, Уровень радости: 6, Уровень энергии: 6\n","Выберите действие: 0\n","Выход из программы.\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"qZ7qFQnmssNd"}},{"cell_type":"markdown","source":["Рыцарь и дракон\n","\n","Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n","\n","Требования:\n","\n","- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n","- Управление персонажем и мини сюжет\n","- Создание дракона (Имя, информация о здоровье и уроне)\n","- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n","- Реализовать бой между драконом и рыцарем"],"metadata":{"id":"UaccTe7ltNvg"}},{"cell_type":"code","source":["import random\n","\n","class Character:\n","    def __init__(self, name, health, armor, attack_min, attack_max):\n","        self.name = name\n","        self.health = health\n","        self.armor = armor\n","        self.attack_min = attack_min\n","        self.attack_max = attack_max\n","\n","    def attack(self):\n","        damage = random.randint(self.attack_min, self.attack_max)\n","        print(f'{self.name} наносит {damage} урона!')\n","        return damage\n","\n","    def take_damage(self, damage):\n","        if self.armor > 0:\n","            self.armor -= damage\n","            if self.armor < 0:\n","                self.health += self.armor\n","                self.armor = 0\n","        elif self.armor <= 0:\n","            self.armor = 0   # Устанавливаем броню в 0\n","            self.health -= damage\n","        self.health = max(0, self.health)\n","\n","        print(f'{self.name} получает {damage} урона. Осталось здоровья: {self.health}, броня: {self.armor}')\n","\n","    def is_alive(self):\n","        return self.health > 0\n","\n","class Knight(Character):\n","    def __init__(self, name, armor, attack_min, attack_max, health):\n","        super().__init__(name, health, armor, attack_min, attack_max)\n","\n","class Dragon(Character):\n","    def __init__(self, name, armor, health, attack_min, attack_max):\n","        super().__init__(name, health, armor, attack_min, attack_max)\n","\n","def create_knights():\n","    return [\n","        Knight(\"Деревянный рыцарь\", armor=100, attack_min=25, attack_max=40, health=200),\n","        Knight(\"Стальной рыцарь\", armor=300, attack_min=15, attack_max=30, health=100),\n","        Knight(\"Бронзовый рыцарь\", armor=200, attack_min=5, attack_max=20, health=300)\n","    ]\n","\n","def create_dragons(difficulty):\n","    if difficulty == 'легкий':\n","        return Dragon(\"Легкий дракон\", armor=100, health=500, attack_min=5, attack_max=10)\n","    elif difficulty == 'сложный':\n","        return Dragon(\"Сложный дракон\", armor=250, health=750, attack_min=20, attack_max=30)\n","\n","def battle(knight, dragon):\n","    print(f'\\n{knight.name} vs {dragon.name}!\\n')\n","    while knight.is_alive() and dragon.is_alive():\n","        action = input(\"Выберите действие: \\n1. Ударить\\n\")\n","        if action == '1':\n","            damage_to_dragon = knight.attack()\n","            dragon.take_damage(damage_to_dragon)\n","\n","            if not dragon.is_alive():\n","                print(f'\\n{dragon.name} повержен! {knight.name} одержал победу!')\n","                break\n","\n","            damage_to_knight = dragon.attack()\n","            knight.take_damage(damage_to_knight)\n","\n","            if not knight.is_alive():\n","                print(f'\\n{knight.name} повержен! {dragon.name} одержал победу!')\n","                break\n","\n","def main():\n","    print('Добро пожаловать в игру \"Рыцарь и Дракон\"!')\n","\n","    knights = create_knights()\n","    selected_knight = None\n","    selected_dragon = None\n","\n","    while True:\n","        print(\"\\n1. Начать бой \\n\"\n","              \"2. Выбрать рыцаря \\n\"\n","              \"3. Дать имя рыцарю \\n\"\n","              \"4. Выбрать уровень сложности \\n\"\n","              \"5. Дополнительное снаряжение \\n\"\n","              \"6. Выход\")\n","\n","        choice = input(\"Выберите действие: \")\n","\n","        if choice == '1':\n","            if selected_knight is None:\n","                print(\"Необходимо выбрать рыцаря перед началом боя.\")\n","                continue\n","            elif selected_dragon is None:\n","                print(\"Необходимо выбрать дракона перед началом боя.\")\n","                continue\n","            else:\n","                battle(selected_knight, selected_dragon)\n","\n","        elif choice == '2':\n","            print(\"Выберите рыцаря:\")\n","            for i, knight in enumerate(knights, start=1):\n","                print(f\"{i}. {knight.name} | Здоровье: {knight.health} | Броня: {knight.armor} | Урон: {knight.attack_min}-{knight.attack_max}\")\n","            knight_choice = int(input(\"Введите номер рыцаря: \")) - 1\n","            selected_knight = knights[knight_choice]\n","            print(f\"Вы выбрали: {selected_knight.name}\")\n","\n","        elif choice == '3':\n","            if selected_knight:\n","                new_name = input(f\"Введите новое имя для {selected_knight.name} (текущее: {selected_knight.name}): \")\n","                confirm = input(f\"Вы уверены, что хотите изменить имя на '{new_name}'? (да/нет): \")\n","                if confirm.lower() == 'да':\n","                    selected_knight.name = new_name\n","                    print(f\"Имя изменено на: {selected_knight.name}\")\n","            else:\n","                print(\"Сначала выберите рыцаря.\")\n","\n","        elif choice == '4':\n","            print(\"Выберите уровень сложности:\")\n","            print(\"1. Легкий дракон\")\n","            print(\"2. Сложный дракон\")\n","            difficulty_choice = input(\"Введите номер сложности: \")\n","            if difficulty_choice == '1':\n","                selected_dragon = create_dragons('легкий')\n","                print(f\"Вы выбрали: {selected_dragon.name}\")\n","            elif difficulty_choice == '2':\n","                selected_dragon = create_dragons('сложный')\n","                print(f\"Вы выбрали: {selected_dragon.name}\")\n","\n","        elif choice == '5':\n","            print(\"Дополнительное снаряжение не реализовано.\")\n","\n","        elif choice == '6':\n","            print(\"Выход из игры.\")\n","            break\n","\n","        else:\n","            print(\"Неверный ввод, попробуйте снова.\")\n","\n","if __name__ == '__main__':\n","    main()"],"metadata":{"id":"LCcxp5Q0srjY","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1732122316062,"user_tz":-300,"elapsed":26834,"user":{"displayName":"Данила Копьев (Ofpoil)","userId":"14884835633617481459"}},"outputId":"d460c18d-eec5-47b9-deae-cdab292e5ff4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Добро пожаловать в игру \"Рыцарь и Дракон\"!\n","\n","1. Начать бой \n","2. Выбрать рыцаря \n","3. Дать имя рыцарю \n","4. Выбрать уровень сложности \n","5. Дополнительное снаряжение \n","6. Выход\n","Выберите действие: 2\n","Выберите рыцаря:\n","1. Деревянный рыцарь | Здоровье: 200 | Броня: 100 | Урон: 25-40\n","2. Стальной рыцарь | Здоровье: 100 | Броня: 300 | Урон: 15-30\n","3. Бронзовый рыцарь | Здоровье: 300 | Броня: 200 | Урон: 5-20\n","Введите номер рыцаря: 1\n","Вы выбрали: Деревянный рыцарь\n","\n","1. Начать бой \n","2. Выбрать рыцаря \n","3. Дать имя рыцарю \n","4. Выбрать уровень сложности \n","5. Дополнительное снаряжение \n","6. Выход\n","Выберите действие: 4\n","Выберите уровень сложности:\n","1. Легкий дракон\n","2. Сложный дракон\n","Введите номер сложности: 1\n","Вы выбрали: Легкий дракон\n","\n","1. Начать бой \n","2. Выбрать рыцаря \n","3. Дать имя рыцарю \n","4. Выбрать уровень сложности \n","5. Дополнительное снаряжение \n","6. Выход\n","Выберите действие: 1\n","\n","Деревянный рыцарь vs Легкий дракон!\n","\n","Выберите действие: \n","1. Ударить\n","1\n","Деревянный рыцарь наносит 33 урона!\n","Легкий дракон получает 33 урона. Осталось здоровья: 500, броня: 67\n","Легкий дракон наносит 5 урона!\n","Деревянный рыцарь получает 5 урона. Осталось здоровья: 200, броня: 95\n","Выберите действие: \n","1. Ударить\n","1\n","Деревянный рыцарь наносит 34 урона!\n","Легкий дракон получает 34 урона. Осталось здоровья: 500, броня: 33\n","Легкий дракон наносит 9 урона!\n","Деревянный рыцарь получает 9 урона. Осталось здоровья: 200, броня: 86\n","Выберите действие: \n","1. Ударить\n","1\n","Деревянный рыцарь наносит 36 урона!\n","Легкий дракон получает 36 урона. Осталось здоровья: 497, броня: -3\n","Легкий дракон наносит 9 урона!\n","Деревянный рыцарь получает 9 урона. Осталось здоровья: 200, броня: 77\n","Выберите действие: \n","1. Ударить\n","1\n","Деревянный рыцарь наносит 37 урона!\n","Легкий дракон получает 37 урона. Осталось здоровья: 460, броня: 0\n","Легкий дракон наносит 6 урона!\n","Деревянный рыцарь получает 6 урона. Осталось здоровья: 200, броня: 71\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-809cc0e50440>\u001b[0m in \u001b[0;36m<cell line: 138>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-12-809cc0e50440>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     94\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m                 \u001b[0mbattle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mselected_knight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselected_dragon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'2'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-12-809cc0e50440>\u001b[0m in \u001b[0;36mbattle\u001b[0;34m(knight, dragon)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'\\n{knight.name} vs {dragon.name}!\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mknight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_alive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdragon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_alive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m         \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Выберите действие: \\n1. Ударить\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maction\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m             \u001b[0mdamage_to_dragon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mknight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mattack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["# Задание 3\n"],"metadata":{"id":"N8oFiEXol3e2"}},{"cell_type":"markdown","source":["Цель - создать менеджера команды Pokémon, который позволит пользователям:\n","\n","- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n","- Удалять покемонов из их команды.\n","- Просматривать подробную информацию обо всех покемонах в команде.\n","- Находить покемона по имени.\n","- Устраивать тренировочный бой между двумя покемонами\n","\n","Для данной задачи используйте: https://pokeapi.co/\n"],"metadata":{"id":"9p4WQG_Vl7wB"}},{"cell_type":"code","source":["import requests\n","from dataclasses import dataclass, asdict\n","from typing import List, Optional\n","\n","@dataclass\n","class Pokemon:\n","    name: str\n","    id: int\n","    types: List[str]\n","    hp: int\n","    attack: int\n","    defense: int\n","\n","    def __post_init__(self):\n","        self.name = self.name.capitalize()\n","\n","class TeamManager:\n","    def __init__(self):\n","        self.team: List[Pokemon] = []\n","\n","    def add_pokemon(self, name: str):\n","        pokemon_data = self.fetch_pokemon_data(name)\n","        if not pokemon_data:\n","            print(f\"Покемон с именем '{name}' не найден.\")\n","            return\n","        if any(p.name.lower() == pokemon_data['name'].lower() for p in self.team):\n","            print(f\"Покемон '{name}' уже в команде.\")\n","        else:\n","            new_pokemon = Pokemon(\n","                name=pokemon_data['name'],\n","                id=pokemon_data['id'],\n","                types=[t['type']['name'] for t in pokemon_data['types']],\n","                hp=pokemon_data['stats'][0]['base_stat'],\n","                attack=pokemon_data['stats'][1]['base_stat'],\n","                defense=pokemon_data['stats'][2]['base_stat']\n","            )\n","            self.team.append(new_pokemon)\n","            print(f\"Покемон '{new_pokemon.name}' добавлен в команду.\")\n","\n","    def remove_pokemon(self, name: str):\n","        if any(p.name.lower() == name.lower() for p in self.team):\n","            self.team = [p for p in self.team if p.name.lower() != name.lower()]\n","            print(f\"Покемон '{name}' удалён из команды.\")\n","        else:\n","            print(f\"Покемон с именем '{name}' не найден в команде.\")\n","\n","    def view_pokemon_info(self, name: str):\n","        pokemon = self.find_pokemon(name)\n","        if pokemon:\n","            print(f\"Имя: {pokemon.name}\\n\"\n","                  f\"ID: {pokemon.id}\\n\"\n","                  f\"Типы: {', '.join(pokemon.types)}\\n\"\n","                  f\"HP: {pokemon.hp}\\n\"\n","                  f\"Атака: {pokemon.attack}\\n\"\n","                  f\"Защита: {pokemon.defense}\\n\")\n","\n","    def view_team(self):\n","        if not self.team:\n","            print(\"Ваша команда пуста.\")\n","            return\n","        print(\"Список покемонов в команде:\")\n","        for pokemon in self.team:\n","            print(pokemon)\n","\n","    def find_pokemon(self, name: str) -> Optional[Pokemon]:\n","        for pokemon in self.team:\n","            if pokemon.name.lower() == name.lower():\n","                return pokemon\n","        print(f\"Покемон с именем '{name}' не найден в команде.\")\n","        return None\n","\n","    def battle(self, name1: str, name2: str):\n","        pokemon1 = self.find_pokemon(name1)\n","        pokemon2 = self.find_pokemon(name2)\n","\n","        if pokemon1 and pokemon2:\n","            print(f\"Бой между {pokemon1.name} и {pokemon2.name}!\")\n","            if pokemon1.attack > pokemon2.attack:\n","                print(f\"{pokemon1.name} победил!\")\n","            elif pokemon1.attack < pokemon2.attack:\n","                print(f\"{pokemon2.name} победил!\")\n","            else:\n","                print(\"Ничья!\")\n","\n","    @staticmethod\n","    def fetch_pokemon_data(name: str) -> Optional[dict]:\n","        response = requests.get(f'https://pokeapi.co/api/v2/pokemon/{name.lower()}')\n","        if response.status_code == 200:\n","            return response.json()\n","        return None\n","\n","def main():\n","    team_manager = TeamManager()\n","    print(\"Вас приветствует менеджер команды Pokemon! \\n\\n\"\n","          \"1. Добавить покемона в команду \\n\"\n","          \"2. Удалить покемона из команды \\n\"\n","          \"3. Подробная информация о покемоне \\n\"\n","          \"4. Список покемонов в команде \\n\"\n","          \"5. Начать бой между покемонами \\n\"\n","          \"6. Выход\")\n","\n","    while True:\n","        choice = input(\"\\nВыберите опцию (1-6): \")\n","\n","        if choice == \"1\":\n","            name = input(\"Введите имя покемона: \")\n","            team_manager.add_pokemon(name)\n","        elif choice == \"2\":\n","            name = input(\"Введите имя покемона для удаления: \")\n","            team_manager.remove_pokemon(name)\n","        elif choice == \"3\":\n","            name = input(\"Введите имя покемона для информации: \")\n","            team_manager.view_pokemon_info(name)\n","        elif choice == \"4\":\n","            team_manager.view_team()\n","        elif choice == \"5\":\n","            name1 = input(\"Введите имя первого покемона: \")\n","            name2 = input(\"Введите имя второго покемона: \")\n","            team_manager.battle(name1, name2)\n","        elif choice == \"6\":\n","            print(\"Выход из менеджера команды Pokémon.\")\n","            break\n","        else:\n","            print(\"Некорректный ввод. Пожалуйста, выберите опцию от 1 до 6.\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"NnGYp1MTqi5k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732123120675,"user_tz":-300,"elapsed":315574,"user":{"displayName":"Данила Копьев (Ofpoil)","userId":"14884835633617481459"}},"outputId":"ea171465-9203-425d-a458-b7f1b6fec675"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Вас приветствует менеджер команды Pokemon! \n","\n","1. Добавить покемона в команду \n","2. Удалить покемона из команды \n","3. Подробная информация о покемоне \n","4. Список покемонов в команде \n","5. Начать бой между покемонами \n","6. Выход\n","\n","Выберите опцию (1-6): 1\n","Введите имя покемона: rattata\n","Покемон 'Rattata' добавлен в команду.\n","\n","Выберите опцию (1-6): 3\n","Введите имя покемона для информации: rattata\n","Имя: Rattata\n","ID: 19\n","Типы: normal\n","HP: 30\n","Атака: 56\n","Защита: 35\n","\n","\n","Выберите опцию (1-6): 1\n","Введите имя покемона: machamp\n","Покемон 'Machamp' добавлен в команду.\n","\n","Выберите опцию (1-6): 3\n","Введите имя покемона для информации: machamp\n","Имя: Machamp\n","ID: 68\n","Типы: fighting\n","HP: 90\n","Атака: 130\n","Защита: 80\n","\n","\n","Выберите опцию (1-6): 4\n","Список покемонов в команде:\n","{'name': 'Rattata', 'id': 19, 'types': ['normal'], 'hp': 30, 'attack': 56, 'defense': 35}\n","{'name': 'Machamp', 'id': 68, 'types': ['fighting'], 'hp': 90, 'attack': 130, 'defense': 80}\n","\n","Выберите опцию (1-6): 5\n","Введите имя первого покемона: rattata\n","Введите имя второго покемона: machamp\n","Бой между Rattata и Machamp!\n","Machamp победил!\n","\n","Выберите опцию (1-6): 5\n","Введите имя первого покемона: machamp\n","Введите имя второго покемона: machoke\n","Покемон с именем 'machoke' не найден в команде.\n","\n","Выберите опцию (1-6): 5\n","Введите имя первого покемона: golem\n","Введите имя второго покемона: machamp\n","Покемон с именем 'golem' не найден в команде.\n","\n","Выберите опцию (1-6): 1\n","Введите имя покемона: machoke\n","Покемон 'Machoke' добавлен в команду.\n","\n","Выберите опцию (1-6): 5\n","Введите имя первого покемона: machoke\n","Введите имя второго покемона: machamp\n","Бой между Machoke и Machamp!\n","Machamp победил!\n","\n","Выберите опцию (1-6): 6\n","Выход из менеджера команды Pokémon.\n"]}]},{"cell_type":"code","source":["3"],"metadata":{"id":"D57byKXNjUgO"},"execution_count":null,"outputs":[]}]}