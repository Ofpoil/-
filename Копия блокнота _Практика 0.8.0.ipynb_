{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1731318437767}],"collapsed_sections":["ra45s33wUt-C","ia9UtA0cU1Iy","eecUb-akU1ji","QGrsZrv5U1s8"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGeJM9n4UqUD","colab":{"base_uri":"https://localhost:8080/","height":646},"executionInfo":{"status":"error","timestamp":1731600151653,"user_tz":-300,"elapsed":94765,"user":{"displayName":"Данила Копьев (Ofpoil)","userId":"14884835633617481459"}},"outputId":"68fa081e-1bbc-4290-e35e-1de0ee8a5940"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Панель управления исследованиями космоса:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей (ОСЗ)\n","4. Данные о космической погоде\n","5. Выход\n","Выберите опцию (1-5): 4\n","Введите дату (гггг-мм-дд): 2003-03-03\n","\n","Панель управления исследованиями космоса:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей (ОСЗ)\n","4. Данные о космической погоде\n","5. Выход\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-df7be04b8668>\u001b[0m in \u001b[0;36m<cell line: 108>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 109\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-1-df7be04b8668>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     88\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"5. Выход\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m         \u001b[0mchoice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Выберите опцию (1-5): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}],"source":["import requests\n","import json\n","from datetime import datetime\n","\n","NASA_API_KEY = 'f3is16iBRgMN51hS2DT0dXfhKQgjl9nPqNH8hdc8'  # Замените на ваш ключ API\n","\n","\n","def get_apod():\n","    url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        print(f\"Название: {data['title']}\\n\")\n","        print(f\"Описание: {data['explanation']}\\n\")\n","        print(f\"URL изображения: {data['url']}\\n\")\n","    else:\n","        print(\"Ошибка при получении APOD:\", response.status_code)\n","    return\n","\n","\n","def get_mars_photos():\n","    sol = input(\"Введите сол (день миссии на Марсе): \")\n","    camera = input(\"Введите тип камеры (например, 'FHAZ', 'RHAZ', 'CHEMCAM' и т.д.): \")\n","\n","    url = f'https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol={sol}&camera={camera}&api_key={NASA_API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        if data['photos']:\n","            for photo in data['photos']:\n","                print(f\"Фото URL: {photo['img_src']}, Дата: {photo['earth_date']}\")\n","        else:\n","            print(\"Фото не найдены по заданным параметрам.\")\n","    else:\n","        print(\"Ошибка при получении фотографий с марсохода:\", response.status_code)\n","    return\n","\n","\n","def get_near_earth_objects():\n","    date = input(\"Введите дату (гггг-мм-дд): \")\n","\n","    # Проверка формата даты\n","    try:\n","        datetime.strptime(date, '%Y-%m-%d')\n","    except ValueError:\n","        print(\"Неправильный формат даты. Пожалуйста, используйте формат гггг-мм-дд.\")\n","\n","    url = f'https://api.nasa.gov/neo/rest/v1/feed?start_date={date}&end_date={date}&api_key={NASA_API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        for neo in data['near_earth_objects'][date]:\n","            name = neo['name']\n","            size = neo['estimated_diameter']['meters']['estimated_diameter_max']\n","            hazardous = 'да' if neo['is_potentially_hazardous_asteroid'] else 'нет'\n","            print(f\"Объект: {name}, Размер: {size:.2f} м, Потенциальная опасность: {hazardous}\")\n","    else:\n","        print(\"Ошибка при получении объектов, сближающихся с Землей:\", response.status_code)\n","    return\n","\n","def get_space_weather():\n","    date = input(\"Введите дату (гггг-мм-дд): \")\n","    # Проверка формата даты\n","    try:\n","        datetime.strptime(date, '%Y-%m-%d')\n","    except ValueError:\n","        print(\"Неправильный формат даты. Пожалуйста, используйте формат гггг-мм-дд.\")\n","        return\n","\n","    url_1 = f'https://api.nasa.gov/DONKI/FLR?startDate={date}&endDate={date}&api_key={NASA_API_KEY}'\n","    url_2 = f'https://api.nasa.gov/DONKI/GST?startDate={date}&endDate={date}&api_key={NASA_API_KEY}'\n","\n","    response_1 = requests.get(url_1)\n","    response_2 = requests.get(url_2)\n","\n","    if response_1.status_code == 200:\n","        flr_data = response_1.json()\n","        if flr_data:\n","            print(\"Данные FLR:\", flr_data)\n","        else:\n","            print(\"Нет данных FLR на эту дату.\")\n","    else:\n","        print(\"Ошибка при получении данных FLR:\", response_1.status_code)\n","\n","    if response_2.status_code == 200:\n","        gst_data = response_2.json()\n","        if gst_data:\n","            print(\"Данные GST:\", gst_data)\n","        else:\n","            print(\"Нет данных GST на эту дату.\")\n","    else:\n","        print(\"Ошибка при получении данных GST:\", response_2.status_code)\n","\n","    return flr_data, gst_data\n","\n","\n","def main():\n","    while True:\n","        print(\"\\nПанель управления исследованиями космоса:\")\n","        print(\"1. Астрономическая картинка дня (APOD)\")\n","        print(\"2. Фотографии с марсохода\")\n","        print(\"3. Объекты, сближающиеся с Землей (ОСЗ)\")\n","        print(\"4. Данные о космической погоде\")\n","        print(\"5. Выход\")\n","\n","        choice = input(\"Выберите опцию (1-5): \")\n","\n","        if choice == '1':\n","            get_apod()\n","        elif choice == '2':\n","            get_mars_photos()\n","        elif choice == '3':\n","            get_near_earth_objects()\n","        elif choice == '4':\n","            get_space_weather()\n","        elif choice == '5':\n","            print(\"Выход из приложения.\")\n","            break\n","        else:\n","            print(\"Неверный выбор. Пожалуйста, выберите снова.\")\n","    return\n","\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjUH1GznU1Iy"},"outputs":[],"source":["import requests\n","\n","BASE_URL = \"https://api.artic.edu/api/v1/artworks\"\n","\n","def fetch_artworks(page=1):\n","    params = {\n","        'page': page,\n","        'limit': 10  # Количество произведений на странице\n","    }\n","    response = requests.get(BASE_URL, params=params)\n","    data = response.json()\n","    return data['data'], data['pagination']\n","\n","def filter_artworks_by_artist(artworks, artist_name):\n","    return [art for art in artworks if artist_name.lower() in art.get('artist_title', '').lower()]\n","\n","def display_artwork_details(artwork):\n","    print(f\"Название: {artwork['title']}\")\n","    print(f\"Исполнитель: {artwork.get('artist_title', 'Неизвестен')}\")\n","    print(f\"Дата: {artwork.get('date_display', 'Неизвестна')}\")\n","    print(f\"Носитель и техника: {artwork.get('medium_display', 'Неизвестно')}\")\n","\n","def display_artworks(artworks):\n","    print(\"\\nСписок произведений искусства:\")\n","    for idx, artwork in enumerate(artworks):\n","        print(f\"{idx + 1}. {artwork['title']} (Исполнитель: {artwork.get('artist_title', 'Неизвестен')})\")\n","\n","def main():\n","    current_page = 1\n","    while True:\n","        artworks, pagination = fetch_artworks(current_page)\n","        display_artworks(artworks)\n","\n","        print(\"\\nВыберите опцию:\")\n","        print(\"1. Перейти к следующей странице\")\n","        print(\"2. Перейти к предыдущей странице\")\n","        print(\"3. Фильтровать по исполнителю\")\n","        print(\"4. Выход\")\n","\n","        choice = input(\"Введите номер опции: \")\n","\n","        if choice == '1':\n","            if current_page < pagination['total_pages']:  # Исправлено здесь\n","                current_page += 1\n","            else:\n","                print(\"Это последняя страница.\")\n","        elif choice == '2':\n","            if current_page > 1:\n","                current_page -= 1\n","            else:\n","                print(\"Это первая страница.\")\n","        elif choice == '3':\n","            artist_name = input(\"Введите имя художника: \")\n","            filtered_artworks = filter_artworks_by_artist(artworks, artist_name)\n","            if filtered_artworks:\n","                display_artworks(filtered_artworks)\n","                artwork_choice = input(\"Введите номер произведения для просмотра деталей: \")\n","                if artwork_choice.isdigit() and 1 <= int(artwork_choice) <= len(filtered_artworks):\n","                    display_artwork_details(filtered_artworks[int(artwork_choice) - 1])\n","                else:\n","                    print(\"Неверный номер.\")\n","            else:\n","                print(\"Произведения искусства этого художника не найдены.\")\n","        elif choice == '4':\n","            print(\"Выход из программы.\")\n","            break\n","        else:\n","            print(\"Неверный выбор. Попробуйте снова.\")\n","\n","if __name__ == '__main__':\n","    main()"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["import requests\n","import json\n","from datetime import datetime, timedelta\n","\n","class CryptoPortfolio:\n","    def __init__(self):\n","        self.portfolio = {}\n","\n","    def add_crypto(self, name, amount):\n","        if name in self.portfolio:\n","            self.portfolio[name] += amount\n","        else:\n","            self.portfolio[name] = amount\n","\n","    def remove_crypto(self, name, amount):\n","        if name in self.portfolio:\n","            self.portfolio[name] -= amount\n","            if self.portfolio[name] <= 0:\n","                del self.portfolio[name]\n","        else:\n","            print(f\"{name} не найден в портфеле.\")\n","\n","    def get_total_value(self, fiat_currency='usd'):\n","        total_value = 0\n","        for crypto, amount in self.portfolio.items():\n","            price = self.get_current_price(crypto, fiat_currency)\n","\n","            total_value += price[0] * amount\n","        return total_value\n","\n","    def get_current_price(self, crypto_id, fiat_currency='usd'):\n","        url = f\"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies={fiat_currency}&include_24hr_change=true\"\n","        response = requests.get(url)\n","        data = response.json()\n","        return data[crypto_id][fiat_currency], data[crypto_id][f'{fiat_currency}_24h_change']\n","\n","    def get_historical_prices(self, crypto_id, days=7, currency='usd'):\n","        end_date = datetime.now()\n","        start_date = end_date - timedelta(days=days)\n","        url = f\"https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart/range?vs_currency={currency}&from={start_date.timestamp()}&to={end_date.timestamp()}\"\n","        response = requests.get(url)\n","\n","        if response.status_code != 200:\n","            print(f\"Ошибка получения данных: {response.status_code}\")\n","            return {}\n","\n","        data = response.json()\n","\n","        if 'prices' not in data:\n","            print(f\"Ошибка в полученных данных: {data}\")\n","            return {}\n","\n","        prices = data['prices']\n","        historical_data = {}\n","\n","        for price in prices:\n","            timestamp, value = price\n","            date = datetime.fromtimestamp(timestamp // 1000).strftime('%Y-%m-%d')  # делим на 1000, так как API возвращает время в мс\n","            historical_data[date] = value\n","\n","        return historical_data\n","\n","    def display_portfolio(self):\n","        print(\"Ваш портфель:\")\n","        for crypto, amount in self.portfolio.items():\n","            current_price, change = self.get_current_price(crypto)\n","            print(f\"{crypto.capitalize()}: {amount} (Текущая цена: {current_price}$, Изменение за 24 часа: {change}% )\")\n","        print(f\"Общая стоимость портфеля: {self.get_total_value()}$\")\n","\n","def main():\n","    portfolio = CryptoPortfolio()\n","\n","    while True:\n","        print(\"\\n1. Добавить криптовалюту\")\n","        print(\"2. Удалить криптовалюту\")\n","        print(\"3. Показать портфель\")\n","        print(\"4. Получить исторические данные\")\n","        print(\"5. Выход\")\n","        choice = input(\"Выберите опцию: \")\n","\n","        if choice == '1':\n","            crypto_name = input(\"Введите имя криптовалюты: \").strip().lower()\n","            amount = float(input(\"Введите количество: \"))\n","            portfolio.add_crypto(crypto_name, amount)\n","\n","        elif choice == '2':\n","            crypto_name = input(\"Введите имя криптовалюты для удаления: \").strip().lower()\n","            amount = float(input(\"Введите количество для удаления: \"))\n","            portfolio.remove_crypto(crypto_name, amount)\n","\n","        elif choice == '3':\n","            portfolio.display_portfolio()\n","\n","        elif choice == '4':\n","            crypto_name = input(\"Введите имя криптовалюты для анализа: \").strip().lower()\n","            historical_prices = portfolio.get_historical_prices(crypto_name)\n","            print(\"Исторические данные (цены за последние 7 дней):\")\n","            for date, price in historical_prices.items():\n","                print(f\"{date}: {price}$\")\n","\n","        elif choice == '5':\n","            print(\"Выход из программы.\")\n","            break\n","\n","        else:\n","            print(\"Неверный выбор, пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"_0DToTqlvywa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно: Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}