# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.1.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AJWIJvsRVhnrbN87dM3Huj5POUcWOpyU

**ФИО:**
"""

Копьев Данила Александрович

"""# Задание 1

**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.


Отрабатываемый принцип: Наследование
"""

class Employee:
    def __init__(self, major, career_background, age):
        self.major = major
        self.career_background = career_background
        self.age = age
        self.bonus_salary = 0


class Manager(Employee):
    base_salary = 40000

    def __init__(self, major, career_background, age):
        super().__init__(major, career_background, age)

    def experience_bonus(self):
        if self.career_background <= 3:
            bonus = 0
        elif 3 < self.career_background <= 5:
            bonus = 10000
        else:
            bonus = 12000
        self.bonus_salary += bonus
        return bonus

    def age_bonus(self):
        bonus = 0
        if self.age - self.career_background < 18:
            bonus -= 10000
        elif 18 <= self.age < 21:
            bonus += 2000
        elif 21 <= self.age < 30:
            bonus += 3000
        self.bonus_salary += bonus
        return bonus


class Developer(Employee):
    base_salary = 65000

    def __init__(self, major, career_background, age):
        super().__init__(major, career_background, age)

    def experience_bonus(self):
        if self.career_background <= 3:
            bonus = 0
        elif 3 < self.career_background <= 5:
            bonus = 10000
        else:
            bonus = 12000
        self.bonus_salary += bonus
        return bonus

    def age_bonus(self):
        bonus = 0
        if self.age - self.career_background < 18:
            bonus -= 10000
        elif 18 <= self.age < 21:
            bonus += 2000
        elif 21 <= self.age < 30:
            bonus += 3000
        self.bonus_salary += bonus
        return bonus


def start():
    major = 'skibidi'
    while True:
        major = input('Введите название специальности (Manager or Developer): ')
        career_background = int(input('Введите опыт работы (числом): '))
        age = int(input('Введите свой возраст: '))

        if major == 'Manager' or major == 'manager':
            user = Manager(major, career_background, age)

            total_salary = user.experience_bonus() + user.age_bonus() + user.base_salary

            print(f'Ваш бонус за опыт работы составляет {user.experience_bonus()}р.')
            print(f'Ваш бонус за ваш возраст составляет {user.age_bonus()}р.')
            print(f'Ваша итоговая зарплата составляет {total_salary}р.')
        elif major == 'Developer' or major == 'developer':
            user = Developer(major, career_background, age)

            total_salary = user.experience_bonus() + user.age_bonus() + user.base_salary

            print(f'Ваш бонус за опыт работы составляет {user.experience_bonus()}р.')
            print(f'Ваш бонус за ваш возраст составляет {user.age_bonus()}р.')
            print(f'Ваша итоговая зарплата составляет {total_salary}р.')
        else:
            print('Введенная вами специальность не является корректной. Введите еще раз \n')


if __name__ == '__main__':
    start()

"""# Задание 2

**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.


Отрабатываемый принцип: Полиморфизм
"""

class Transport:
    def __init__(self, weight, power, passenger_capacity, maximum_speed):
        self.weight = weight
        self.power = power
        self.passenger_capacity = passenger_capacity
        self.maximum_speed = maximum_speed


class Tram(Transport):
    def get_info(self):
        print('Характеристики трамвая: \n'
            'Вес: 15000-20000 кг \n'
            'Мощность: 4x40-60 кВт \n'
            'Пассажировместимость: 100-220 человек \n'
            'Максимальная скорость: 55-65 км/ч \n\n')

    def counter(self):
        counter = 0
        if 15000 <= self.weight <= 20000:
            counter += 1
        if 100 <= self.power <= 300:
            counter += 1
        if 100 <= self.passenger_capacity <= 220:
            counter += 1
        if 55 <= self.maximum_speed <= 65:
            counter += 1
        return counter


class Car(Transport):
    def get_info(self):
        print('Характеристики автомобиля: \n'
            'Вес: 1000-7000 кг \n'
            'Мощность: 100-2500 л.с \n'
            'Пассажировместимость: 1-8 человек \n'
            'Максимальная скорость: 200-250 км/ч \n\n')

    def counter(self):
        counter = 0
        if 1000 <= self.weight <= 7000:
            counter += 1
        if 100 <= self.power <= 2500:
            counter += 1
        if 1 <= self.passenger_capacity <= 8:
            counter += 1
        if 200 <= self.maximum_speed <= 250:
            counter += 1
        return counter


class Bike(Transport):
    def get_info(self):
        print('Характеристики автомобиля: \n'
            'Вес: 75-250 кг \n'
            'Мощность: 15-200 л.с \n'
            'Пассажировместимость: 1-2 человек \n'
            'Максимальная скорость: 200-250 км/ч \n\n')

    def counter(self):
        counter = 0
        if 75 <= self.weight <= 250:
            counter += 1
        if 15 <= self.power <= 200:
            counter += 1
        if 1 <= self.passenger_capacity <= 2:
            counter += 1
        if 200 <= self.maximum_speed <= 250:
            counter += 1
        return counter


def start():
    print('Сейчас вы будете вводить характеристики транспорта для получения \n'
        'одной или нескольких категорий транспорта \n\n')

    weight = int(input('Введите вес транспортного средства(кг): '))
    power = int(input('Введите мощность т.с(л.с): '))
    passenger_capacity = int(input('Введите пассажировместимость т.с(чел): '))
    maximum_speed = int(input('Введите максимальную скорость т.с(км/ч): \n'))

    bike = Bike(weight, power, passenger_capacity, maximum_speed)
    tram = Tram(weight, power, passenger_capacity, maximum_speed)
    car = Car(weight, power, passenger_capacity, maximum_speed)

    if max(bike.counter(), car.counter(), tram.counter()) == bike.counter:
        print('По данным хар-ам найдено следующее: ')
        bike.get_info()
    elif max(bike.counter(), car.counter(), tram.counter()) == car.counter:
        print('По данным хар-ам найдено следующее: ')
        car.get_info()
    elif max(bike.counter(), car.counter(), tram.counter()) == tram.counter:
        print('По данным хар-ам найдено следующее: ')
        tram.get_info()
    elif tram.counter() == car.counter():
        print('По данным хар-ам найдено следующее: ')
        tram.get_info(), car.get_info()
    elif car.counter() == bike.counter():
        print('По данным хар-ам найдено следующее: ')
        car.get_info(), bike.get_info()
    elif bike.counter() == tram.counter():
        print('По данным хар-ам найдено следующее: ')
        bike.get_info(), tram.get_info()
    else:
        print('По данным хар-ам ничего не найдено, поэтому выведу все т.с: \n')
        car.get_info(), bike.get_info(), tram.get_info()


if __name__ == '__main__':
    start()

"""# Задание 3

Онлайн-магазин:
- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.
- Product включает информацию о цене, наличии на складе и категории товара.
Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.
- Customer управляет информацией о пользователе и его истории заказов.
- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.
"""

class Product:
    def __init__(self, name, price, stock, category):
        self.name = name
        self.price = price
        self.stock = stock
        self.category = category


class Order:
    def __init__(self, customer, order_items, discount=0, tax_rate=0.13):
        self.customer = customer
        self.order_items = order_items
        self.discount = discount
        self.tax_rate = tax_rate

    def calculate_total(self):
        subtotal = sum(item['quantity'] * item['product'].price for item in self.order_items)
        discount_amount = subtotal * (self.discount / 100)
        tax_amount = (subtotal - discount_amount) * self.tax_rate
        total = subtotal - discount_amount + tax_amount
        return total

    def get_order_details(self):
        details = []
        for item in self.order_items:
            details.append({
                'product_name': item['product'].name,
                'quantity': item['quantity'],
                'price': item['product'].price,
                'total_item_price': item['quantity'] * item['product'].price
            })
        return details


class Customer:
    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.orders = []

    def add_order(self, order):
        self.orders.append(order)


class ShoppingCart:
    def __init__(self):
        self.items = {}

    def add_item(self, product, quantity):
        if product in self.items:
            self.items[product]['quantity'] += quantity
        else:
            self.items[product] = {'product': product, 'quantity': quantity}

    def remove_item(self, product):
        if product in self.items:
            del self.items[product]

    def update_quantity(self, product, quantity):
        if product in self.items:
            self.items[product]['quantity'] = quantity
            if quantity <= 0:
                self.remove_item(product)

    def get_items(self):
        return self.items.values()


products = []
customers = []


def add_product():
    name = input("Введите название товара: ")
    while True:
        try:
            price = float(input("Введите цену товара: "))
            break
        except ValueError:
            print("Некорректный ввод цены. Попробуйте еще раз.")
    while True:
        try:
            stock = int(input("Введите количество товара на складе: "))
            break
        except ValueError:
            print("Некорректный ввод количества. Попробуйте еще раз.")
    category = input("Введите категорию товара: ")
    product = Product(name, price, stock, category)
    products.append(product)
    print("Товар успешно добавлен!")


def purchase_product():
    if not products:
        print("В магазине нет товаров.")
        return

    print("Доступные товары:")
    for i, product in enumerate(products):
        print(f"{i + 1}. {product.name} - Цена: {product.price}, На складе: {product.stock}")

    while True:
        try:
            choice = int(input("Выберите товар (введите номер): ")) - 1
            if 0 <= choice < len(products):
                break
            else:
                print("Некорректный номер товара. Попробуйте еще раз.")
        except ValueError:
            print("Некорректный ввод. Попробуйте еще раз.")

    selected_product = products[choice]
    cart = ShoppingCart()

    while True:
        print(f"\nВыбран товар: {selected_product.name}")
        while True:
          try:
            quantity = int(input("Введите количество: "))
            if quantity > selected_product.stock:
              print("Недостаточно товара на складе.")
              continue
            break
          except ValueError:
            print("Некорректный ввод количества. Попробуйте еще раз.")
        cart.add_item(selected_product, quantity)
        print(f"В корзине: {selected_product.name} x {cart.items[selected_product]['quantity']}")
        another_item = input("Добавить еще товар? (да/нет): ")
        if another_item.lower() != 'да':
          break


    if not cart.items:
        print("Корзина пуста.")
        return

    while True:
        name = input("Введите ваше имя: ")
        email = input("Введите ваш email: ")
        customer = Customer(name, email)
        customers.append(customer)
        break

    order_items = [{'product': item['product'], 'quantity': item['quantity']} for item in cart.get_items()]
    order = Order(customer, order_items)
    customer.add_order(order)
    print(f"Заказ оформлен! Итоговая сумма: {order.calculate_total()}")


def view_customer_info():
    if not customers:
        print("Нет зарегистрированных пользователей.")
        return
    for i, customer in enumerate(customers):
        print(f"{i+1}. {customer.name}, {customer.email}")


def view_purchase_history():
    if not customers:
        print("Нет зарегистрированных пользователей.")
        return
    for i, customer in enumerate(customers):
        print(f"\nИстория покупок пользователя {customer.name}:")
        if customer.orders:
            for order in customer.orders:
                print(f"  Заказ №{i+1}, Итоговая сумма: {order.calculate_total()}")
                for item in order.get_order_details():
                    print(f"    Товар: {item['product_name']}, Количество: {item['quantity']}, Цена за единицу: {item['price']}, Сумма: {item['total_item_price']}, Налог: {item['total_item_price'] * 0.13:.2f}") # добавлена информация о налоге для каждого товара
        else:
            print("  Заказов нет.")


while True:
    action = input('Вас приветствует интернет-магазин. В нем можно делать следующее: \n\n'
                   '1. Добавить информацию о товаре \n'
                   '2. Приобрести товар \n'
                   '3. Просмотреть информацию о пользователе \n'
                   '4. Просмотреть историю покупок \n'
                   '5. Выйти \n\n')

    if action == '1':
        add_product()
    elif action == '2':
        purchase_product()
    elif action == '3':
        view_customer_info()
    elif action == '4':
        view_purchase_history()
    elif action == '5':
        break
    else:
        print("Некорректный ввод. Попробуйте еще раз.")

"""# Задание 4

Симулятор космического корабля:
- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.
- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.
- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).
- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами).
"""

class SpaceShip:
    def __init__(self, fuel=100, hull_condition=100, speed=5000):
        self.fuel = fuel
        self.hull_condition = hull_condition
        self.speed = speed

    def refill_fuel(self, amount):
        self.fuel = min(100, self.fuel + amount)
        print(f"Бак заполнен. Текущий уровень топлива: {self.fuel}%")

    def repair_hull(self, amount):
        self.hull_condition = min(100, self.hull_condition + amount)
        print(f"Корпус отремонтирован. Текущее состояние корпуса: {self.hull_condition}%")

    def change_speed(self, amount):
        self.speed += amount
        print(f"Текущая скорость: {self.speed} км/с")

    def __str__(self):
        return f"Топливо: {self.fuel}%, Состояние корпуса: {self.hull_condition}%, Скорость: {self.speed} км/с"


class CrewMember:
    def __init__(self, name, role, skills, health=100):
        self.name = name
        self.role = role
        self.health = health
        self.skills = skills

    def __str__(self):
        return f"Имя: {self.name}, Роль: {self.role}, Здоровье: {self.health}%, Навыки: {self.skills}"


class Mission:
    def __init__(self, name, fuel_cost, crew_cost, reward):
        self.name = name
        self.fuel_cost = fuel_cost
        self.crew_cost = crew_cost
        self.reward = reward

    def __str__(self):
        return f"Название: {self.name}, Затраты топлива: {self.fuel_cost}%, Затраты экипажа: {self.crew_cost}, Награда: {self.reward}"


# Создание корабля и экипажа
spaceship = SpaceShip()
crew = {
    "pilot": CrewMember("Alex", "Пилот", "Управление кораблем"),
    "engineers": [CrewMember("Bob", "Инженер", "Ремонт корабля"), CrewMember("Charlie", "Инженер", "Ремонт корабля")],
    "workers": [CrewMember("David", "Разнорабочий", "Добыча ископаемых"), CrewMember("Eve", "Разнорабочий", "Добыча ископаемых"),
                CrewMember("Frank", "Разнорабочий", "Добыча ископаемых"), CrewMember("Gina", "Разнорабочий", "Добыча ископаемых"),
                CrewMember("Henry", "Разнорабочий", "Добыча ископаемых")],
    "scientists": [CrewMember("Ivan", "Ученый-исследователь", "Удовлетворение любопытства"), CrewMember("Judy", "Ученый-исследователь", "Удовлетворение любопытства")]
}

missions = [
    Mission("Магнум", -20, {"workers": -4}, "+40% к запасам топлива"),
    Mission("Лазарус", -30, {"scientists": -2, "engineers": -1, "workers": -2}, "удовлетворение любопытства ученых")
]


def manage_spaceship():
    while True:
        action_for_space_ship = int(input('Выберите действие: \n\n'
                                          '1. Заполнить бак топливом \n'
                                          '2. Отремонтировать корпус корабля \n'
                                          '3. Изменить скорость корабля \n'
                                          '4. Назад\n\n'))
        if action_for_space_ship == 1:
            amount = int(input("Введите количество топлива для добавления: "))
            spaceship.refill_fuel(amount)
        elif action_for_space_ship == 2:
            amount = int(input("Введите количество для ремонта корпуса: "))
            spaceship.repair_hull(amount)
        elif action_for_space_ship == 3:
            amount = int(input("Введите изменение скорости: "))
            spaceship.change_speed(amount)
        elif action_for_space_ship == 4:
            break
        else:
            print("Некорректный ввод.")


def view_crew():
    while True:
        action_for_team = int(input('Выберите человека для просмотра информации: \n\n'
                                    '1. Пилот \n'
                                    '2. Инженер (двое) \n'
                                    '3. Разнорабочий (пятеро) \n'
                                    '4. Ученый-исследователь (двое) \n'
                                    '5. Назад\n\n'))
        if action_for_team == 1:
            print(crew["pilot"])
        elif action_for_team == 2:
            for engineer in crew["engineers"]:
                print(engineer)
        elif action_for_team == 3:
            for worker in crew["workers"]:
                print(worker)
        elif action_for_team == 4:
            for scientist in crew["scientists"]:
                print(scientist)
        elif action_for_team == 5:
            break
        else:
            print("Некорректный ввод.")


def view_missions():
    for i, mission in enumerate(missions):
        print(f"{i+1}. {mission}")


while True:
    action = int(input('Вас приветствует симулятор космического корабля. \n'
                       'В нем можно делать следующее: \n\n'
                       '1. Просмотреть информацию о корабле \n'
                       '2. Управлять кораблем \n'
                       '3. Просмотр команды \n'
                       '4. Просмотр целей \n'
                       '5. Выход \n\n'))

    if action == 1:
        print(spaceship)
    elif action == 2:
        manage_spaceship()
    elif action == 3:
        view_crew()
    elif action == 4:
        view_missions()
    elif action == 5:
        break
    else:
        print("Некорректный ввод.")

"""# Дополнительно:

**Описание:** создайте консольную версию игры крестики-нолики, используя классы
"""

